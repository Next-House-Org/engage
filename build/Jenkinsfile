// Jenkinsfile  V.4.0
// Description: Handles Docker build, push, and deploy to EC2 using versioning based on Git tags and Jenkins build numbers.
// Includes improved error handling, Docker image tagging, push stages, and email notifications for build results.
// Includes improved error handling, Docker image tagging, push stages, and email notifications for build results.

pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = "docker.nexthouse.org/engage"
        GIT_CREDENTIALS_ID = "GIT_CREDENTIALS_ID"
        DOCKER_CREDENTIALS_ID = "DOCKER_CREDENTIALS_ID"
    }

    stages {
        stage('Checkout') {
            steps {
                cleanWs()
                checkout scm
            }
        }

        stage('Extract Git Tag & Service') {
            steps {
                script {
                    // Extract the latest Git tag
                    def tag = sh(script: "git describe --tags --abbrev=0", returnStdout: true).trim()

                    echo "🔖 Full tag from Git: ${tag}"

                    // Expect format: service-version (example: admin-cli-v1.0.0)
                    def parts = tag.tokenize('-')
                    if (parts.size() < 2) {
                        error "❌ Invalid tag format. Expected: service-version (e.g., admin-cli-v1.0.0)"
                    }

                    SERVICE = parts[0]                         // admin-cli
                    BASE_VERSION = parts[1]                   // v1.0.0
                    VERSION = "${BASE_VERSION}-${env.BUILD_NUMBER}"  // v1.0.0-6

                    echo "📦 Service: ${SERVICE}"
                    echo "🏷️ Base Version: ${BASE_VERSION}"
                    echo "🚀 Final Version: ${VERSION}"
                }
            }
        }

        stage('Build & Push Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS_ID, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh '''
                          echo "$DOCKER_PASSWORD" | docker login $DOCKER_REGISTRY -u "$DOCKER_USERNAME" --password-stdin
                        '''
                    }

                    dir("build") {
                        sh """
                          chmod +x build.sh
                          ./build.sh ${SERVICE} ${VERSION}
                        """
                    }
                }
            }
        }
    }

    post {
        failure {
            echo "❌ Build failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}"
            emailext(
                subject: "❌ Jenkins Build Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: "Check Jenkins logs for details.",
                to: "tharun@knockthedoor.com"
            )
        }
        success {
            echo "✅ Build succeeded: ${env.JOB_NAME} #${env.BUILD_NUMBER}"
        }
    }
}

