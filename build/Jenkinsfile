// Jenkinsfile  V.4.0
// Description: Handles Docker build, push, and deploy to EC2 using versioning based on Git tags and Jenkins build numbers.
// Includes improved error handling, Docker image tagging, push stages, and email notifications for build results.
// Includes improved error handling, Docker image tagging, push stages, and email notifications for build results.

pipeline {
    agent any

    environment {

        DOCKER_CREDENTIALS_ID = 'docker-credentials-id' // Replace with your Docker credentials ID
        DOCKER_REGISTRY = 'docker.nexthouse.org' // Docker registry URL
        DOCKER_IMAGE = 'nexthouse/flow' // Docker image name
        EC2_CREDENTIALS_ID = 'ec2-ssh-key-id' // Replace with your EC2 SSH key credentials ID
        EC2_USER = 'ubuntu' // EC2 instance user
        EC2_HOST = 'ec2-18-235-52-172.compute-1.amazonaws.com' // Replace with your EC2 instance public DNS
        //EC2_HOST = 'ec2-98-84-67-183.compute-1.amazonaws.com' // Replace with your EC2 instance public DNS
        DEPLOY_PATH = '/data/applications/release/flow' // Deployment path on EC2 instance
        EMAIL_RECIPIENTS = 'tharun@knockthedoor.com' // Replace with the recipient's email address


        //DOCKER_REGISTRY = "docker.nexthouse.org/engage"
        //GIT_CREDENTIALS_ID = "GIT_CREDENTIALS_ID"
        //DOCKER_CREDENTIALS_ID = "DOCKER_CREDENTIALS_ID"
    }

    stages {
        stage('Checkout') {
            steps {
                cleanWs()
                checkout scm
            }
        }

        stage('Extract Git Tag & Service') {
            steps {
                script {
                    // Extract the latest Git tag
                    def tag = sh(script: "git describe --tags --abbrev=0", returnStdout: true).trim()

                    echo " Full tag from Git: ${tag}"

                    // Expect format: service-version (example: admin-cli-v1.0.0)
                    def idx = tag.lastIndexOf('-')
                    if (idx == -1) {
                        error " Invalid tag format. Expected: service-version (e.g., admin-cli-v1.0.0)"
                    }

                    def SERVICE = tag.substring(0, idx)           // admin-cli
                    def BASE_VERSION = tag.substring(idx + 1)     // v1.0.0
                    def VERSION = "${BASE_VERSION}-${env.BUILD_NUMBER}"  // v1.0.0-8

                    echo " Service: ${SERVICE}"
                    echo " Base Version: ${BASE_VERSION}"
                    echo " Final Version: ${VERSION}"

                    // Set environment variables for later stages
                    env.SERVICE = SERVICE
                    env.BASE_VERSION = BASE_VERSION
                    env.VERSION = VERSION
                }
            }
        }

        stage('Build & Push Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}",
                                                    usernameVariable: 'DOCKER_USERNAME',
                                                    passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh 'echo $DOCKER_PASSWORD | docker login docker.nexthouse.org -u $DOCKER_USERNAME --password-stdin'
                        
                        // Build the Docker image with version tag
                        sh "docker build -t docker.nexthouse.org/engage/${env.SERVICE}:${env.VERSION} ."
                        
                        // Tag the same image as 'latest'
                        sh "docker tag docker.nexthouse.org/engage/${env.SERVICE}:${env.VERSION} docker.nexthouse.org/engage/${env.SERVICE}:latest"
                        
                        // Push both tags
                        sh "docker push docker.nexthouse.org/engage/${env.SERVICE}:${env.VERSION}"
                        sh "docker push docker.nexthouse.org/engage/${env.SERVICE}:latest"
                        
                        echo "✅ Successfully built and pushed: docker.nexthouse.org/engage/${env.SERVICE}:${env.VERSION}"
                        echo "✅ Successfully tagged and pushed: docker.nexthouse.org/engage/${env.SERVICE}:latest"
                    }
                }
            }
        }
    }

    post {
        failure {
            echo " Build failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}"
            emailext(
                subject: " Jenkins Build Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: "Check Jenkins logs for details.",
                to: "tharun@knockthedoor.com"
            )
        }
        success {
            echo " Build succeeded: ${env.JOB_NAME} #${env.BUILD_NUMBER}"
        }
    }
}
