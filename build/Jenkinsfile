// Jenkinsfile  V.4.0
// Description: Handles Docker build, push, and deploy to EC2 using versioning based on Git tags and Jenkins build numbers.
// Includes improved error handling, Docker image tagging, push stages, and email notifications for build results.
// Includes improved error handling, Docker image tagging, push stages, and email notifications for build results.

pipeline {
    agent any

    environment {
        DOCKER_CREDENTIALS_ID = 'docker-credentials-id'   // Docker credentials ID
        DOCKER_REGISTRY      = 'docker.nexthouse.org/engage'
        EMAIL_RECIPIENTS     = 'tharun@knockthedoor.com'
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    cleanWs()
                    checkout scm
                }
            }
        }

        stage('Extract Git Tag & Service') {
            steps {
                script {
                    // Get latest tag (service name)
                    def gitTag = sh(script: 'git describe --tags --abbrev=0', returnStdout: true).trim()
                    if (!gitTag) {
                        error "❌ No Git tag found. Please tag the commit before building."
                    }

                    // Service name = tag (e.g. admin-cli)
                    env.SERVICE = gitTag

                    // Version = vX.Y.Z-BUILD_NUMBER
                    def baseVersion = sh(script: "git describe --tags --abbrev=0", returnStdout: true).trim()
                    env.VERSION = "${baseVersion}-${env.BUILD_NUMBER}"

                    echo "Service: ${env.SERVICE}"
                    echo "Version: ${env.VERSION}"
                }
            }
        }

        stage('Build & Push Image') {
            steps {
                script {
                    withCredentials([usernamePassword(
                        credentialsId: "${DOCKER_CREDENTIALS_ID}",
                        usernameVariable: 'DOCKER_USERNAME',
                        passwordVariable: 'DOCKER_PASSWORD'
                    )]) {
                        sh "echo ${DOCKER_PASSWORD} | docker login ${DOCKER_REGISTRY} -u ${DOCKER_USERNAME} --password-stdin"

                        dir('build') {
                            sh "./build.sh ${env.SERVICE} ${env.VERSION}"
                        }

                        // Tag & push latest
                        def imageName = "${DOCKER_REGISTRY}/${env.SERVICE}"
                        sh """
                            docker tag ${imageName}:${env.VERSION} ${imageName}:latest
                            docker push ${imageName}:latest
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo "✅ Build succeeded: ${env.JOB_NAME} #${env.BUILD_NUMBER}"
            emailext(
                to: "${EMAIL_RECIPIENTS}",
                subject: "Build Success: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: """\
                    <p>✅ The build has succeeded!</p>
                    <p>Job: ${env.JOB_NAME}</p>
                    <p>Build Number: ${env.BUILD_NUMBER}</p>
                    <p>Service: ${env.SERVICE}</p>
                    <p>Image: ${DOCKER_REGISTRY}/${env.SERVICE}:${env.VERSION}</p>
                    <p>Build URL: ${env.BUILD_URL}</p>
                """
            )
        }
        failure {
            echo "❌ Build failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}"
            emailext(
                to: "${EMAIL_RECIPIENTS}",
                subject: "Build Failure: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: """\
                    <p>❌ The build has failed!</p>
                    <p>Job: ${env.JOB_NAME}</p>
                    <p>Build Number: ${env.BUILD_NUMBER}</p>
                    <p>Build URL: ${env.BUILD_URL}</p>
                """
            )
        }
    }
}

